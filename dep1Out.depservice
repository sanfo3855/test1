type RoundRequestType: double {
  .decimals[0,1]:int
}
type PowRequest: void {
  .base[1,1]:double
  .exponent[1,1]:double
}
type SummationRequest: void {
  .from[1,1]:int
  .to[1,1]:int
}
type RegisterForInputRequest: void {
  .enableSessionListener[0,1]:bool
}
type UnsubscribeSessionListener: void {
  .token[1,1]:string
}
type SubscribeSessionListener: void {
  .token[1,1]:string
}
type EnableTimestampRequest: bool {
  .format[0,1]:string
}
type PadRequest: string {
  .length[1,1]:int
  .char[1,1]:string
}
type MatchRequest: string {
  .regex[1,1]:string
}
type MatchResult: int {
  .group[0,*]:string
}
type ReplaceRequest: string {
  .regex[1,1]:string
  .replacement[1,1]:string
}
type StringItemList: void {
  .item[0,*]:string
}
type SubStringRequest: string {
  .end[1,1]:int
  .begin[1,1]:int
}
type ContainsRequest: string {
  .substring[1,1]:string
}
type SplitRequest: string {
  .regex[1,1]:string
  .limit[0,1]:int
}
type SplitResult: void {
  .result[0,*]:string
}
type SplitByLengthRequest: string {
  .length[1,1]:int
}
type EndsWithRequest: string {
  .suffix[1,1]:string
}
type JoinRequest: void {
  .piece[0,*]:string
  .delimiter[1,1]:string
}
type IndexOfRequest: string {
  .word[1,1]:string
}
type IndexOfResponse: int
type StartsWithRequest: string {
  .prefix[1,1]:string
}
interface dep1Interface {
RequestResponse:
  inc( int )( int )
}

type RoundRequestType: double {
  .decimals[0,1]:int
}
type PowRequest: void {
  .base[1,1]:double
  .exponent[1,1]:double
}
type SummationRequest: void {
  .from[1,1]:int
  .to[1,1]:int
}
type RegisterForInputRequest: void {
  .enableSessionListener[0,1]:bool
}
type UnsubscribeSessionListener: void {
  .token[1,1]:string
}
type SubscribeSessionListener: void {
  .token[1,1]:string
}
type EnableTimestampRequest: bool {
  .format[0,1]:string
}
type PadRequest: string {
  .length[1,1]:int
  .char[1,1]:string
}
type MatchRequest: string {
  .regex[1,1]:string
}
type MatchResult: int {
  .group[0,*]:string
}
type ReplaceRequest: string {
  .regex[1,1]:string
  .replacement[1,1]:string
}
type StringItemList: void {
  .item[0,*]:string
}
type SubStringRequest: string {
  .end[1,1]:int
  .begin[1,1]:int
}
type ContainsRequest: string {
  .substring[1,1]:string
}
type SplitRequest: string {
  .regex[1,1]:string
  .limit[0,1]:int
}
type SplitResult: void {
  .result[0,*]:string
}
type SplitByLengthRequest: string {
  .length[1,1]:int
}
type EndsWithRequest: string {
  .suffix[1,1]:string
}
type JoinRequest: void {
  .piece[0,*]:string
  .delimiter[1,1]:string
}
type IndexOfRequest: string {
  .word[1,1]:string
}
type IndexOfResponse: int
type StartsWithRequest: string {
  .prefix[1,1]:string
}
interface dep2Interface {
RequestResponse:
  twice( int )( int )
}


inputPort dep1Out {
Location: "socket://localhost:13001"
Protocol: sodep
Interfaces: dep1Interface, dep2Interface
}